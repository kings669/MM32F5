<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6180002: Last Updated: Fri Aug 26 15:17:30 2022
<BR><P>
<H3>Maximum Stack Usage =       7664 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
mad_layer_III &rArr; III_decode &rArr; III_reorder &rArr; __aeabi_memcpy4
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[7]">Reset_Handler</a>
 <LI><a href="#[9]">HardFault_Handler</a>
 <LI><a href="#[24]">ADC1_2_IRQHandler</a>
 <LI><a href="#[14]">BKP_TAMPER_IRQHandler</a>
 <LI><a href="#[b]">BusFault_Handler</a>
 <LI><a href="#[4a]">COMP_IRQHandler</a>
 <LI><a href="#[1d]">DMA1_CH1_IRQHandler</a>
 <LI><a href="#[1e]">DMA1_CH2_IRQHandler</a>
 <LI><a href="#[1f]">DMA1_CH3_IRQHandler</a>
 <LI><a href="#[20]">DMA1_CH4_IRQHandler</a>
 <LI><a href="#[22]">DMA1_CH6_IRQHandler</a>
 <LI><a href="#[23]">DMA1_CH7_IRQHandler</a>
 <LI><a href="#[25]">DMA1_CH8_IRQHandler</a>
 <LI><a href="#[43]">DMA2_CH1_IRQHandler</a>
 <LI><a href="#[44]">DMA2_CH2_IRQHandler</a>
 <LI><a href="#[45]">DMA2_CH3_IRQHandler</a>
 <LI><a href="#[46]">DMA2_CH4_IRQHandler</a>
 <LI><a href="#[47]">DMA2_CH5_IRQHandler</a>
 <LI><a href="#[4d]">DMA2_CH6_IRQHandler</a>
 <LI><a href="#[4e]">DMA2_CH7_IRQHandler</a>
 <LI><a href="#[4f]">DMA2_CH8_IRQHandler</a>
 <LI><a href="#[f]">DebugMon_Handler</a>
 <LI><a href="#[198]">Default_Handler</a>
 <LI><a href="#[48]">ENET_IRQHandler</a>
 <LI><a href="#[49]">ENET_WKUP_IRQHandler</a>
 <LI><a href="#[18]">EXTI0_IRQHandler</a>
 <LI><a href="#[36]">EXTI15_10_IRQHandler</a>
 <LI><a href="#[19]">EXTI1_IRQHandler</a>
 <LI><a href="#[1a]">EXTI2_IRQHandler</a>
 <LI><a href="#[1b]">EXTI3_IRQHandler</a>
 <LI><a href="#[1c]">EXTI4_IRQHandler</a>
 <LI><a href="#[27]">EXTI9_5_IRQHandler</a>
 <LI><a href="#[16]">FLASH_IRQHandler</a>
 <LI><a href="#[26]">FlexCAN1_IRQHandler</a>
 <LI><a href="#[4b]">FlexCAN2_IRQHandler</a>
 <LI><a href="#[2f]">I2C1_IRQHandler</a>
 <LI><a href="#[30]">I2C2_IRQHandler</a>
 <LI><a href="#[53]">LPTIM_IRQHandler</a>
 <LI><a href="#[54]">LPUART_IRQHandler</a>
 <LI><a href="#[a]">MemManage_Handler</a>
 <LI><a href="#[8]">NMI_Handler</a>
 <LI><a href="#[13]">PVD_IRQHandler</a>
 <LI><a href="#[10]">PendSV_Handler</a>
 <LI><a href="#[52]">QSPI_IRQHandler</a>
 <LI><a href="#[17]">RCC_CRS_IRQHandler</a>
 <LI><a href="#[37]">RTC_ALR_IRQHandler</a>
 <LI><a href="#[15]">RTC_IRQHandler</a>
 <LI><a href="#[31]">SPI1_IRQHandler</a>
 <LI><a href="#[32]">SPI2_IRQHandler</a>
 <LI><a href="#[3e]">SPI3_IRQHandler</a>
 <LI><a href="#[e]">SVC_Handler</a>
 <LI><a href="#[d]">SecureFault_Handler</a>
 <LI><a href="#[28]">TIM1_BRK_IRQHandler</a>
 <LI><a href="#[2b]">TIM1_CC_IRQHandler</a>
 <LI><a href="#[2a]">TIM1_TRG_COM_IRQHandler</a>
 <LI><a href="#[29]">TIM1_UP_IRQHandler</a>
 <LI><a href="#[2c]">TIM2_IRQHandler</a>
 <LI><a href="#[2d]">TIM3_IRQHandler</a>
 <LI><a href="#[2e]">TIM4_IRQHandler</a>
 <LI><a href="#[3d]">TIM5_IRQHandler</a>
 <LI><a href="#[41]">TIM6_IRQHandler</a>
 <LI><a href="#[42]">TIM7_IRQHandler</a>
 <LI><a href="#[39]">TIM8_BRK_IRQHandler</a>
 <LI><a href="#[3c]">TIM8_CC_IRQHandler</a>
 <LI><a href="#[3b]">TIM8_TRG_COM_IRQHandler</a>
 <LI><a href="#[3a]">TIM8_UP_IRQHandler</a>
 <LI><a href="#[33]">UART1_IRQHandler</a>
 <LI><a href="#[34]">UART2_IRQHandler</a>
 <LI><a href="#[35]">UART3_IRQHandler</a>
 <LI><a href="#[3f]">UART4_IRQHandler</a>
 <LI><a href="#[40]">UART5_IRQHandler</a>
 <LI><a href="#[50]">UART6_IRQHandler</a>
 <LI><a href="#[51]">UART7_IRQHandler</a>
 <LI><a href="#[4c]">USB_FS_IRQHandler</a>
 <LI><a href="#[38]">USB_WKUP_IRQHandler</a>
 <LI><a href="#[c]">UsageFault_Handler</a>
 <LI><a href="#[12]">WWDG_IWDG_IRQHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[70]">Audio_ScanFiles</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[70]">Audio_ScanFiles</a><BR>
 <LI><a href="#[9]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">HardFault_Handler</a><BR>
 <LI><a href="#[24]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[13e]">mad_timer_count</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13e]">mad_timer_count</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[24]">ADC1_2_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[14]">BKP_TAMPER_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[b]">BusFault_Handler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[4a]">COMP_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[1d]">DMA1_CH1_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[1e]">DMA1_CH2_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[1f]">DMA1_CH3_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[20]">DMA1_CH4_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[21]">DMA1_CH5_IRQHandler</a> from i2s_port.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[22]">DMA1_CH6_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[23]">DMA1_CH7_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[25]">DMA1_CH8_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[43]">DMA2_CH1_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[44]">DMA2_CH2_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[45]">DMA2_CH3_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[46]">DMA2_CH4_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[47]">DMA2_CH5_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[4d]">DMA2_CH6_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[4e]">DMA2_CH7_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[4f]">DMA2_CH8_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[f]">DebugMon_Handler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[48]">ENET_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[49]">ENET_WKUP_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[18]">EXTI0_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[36]">EXTI15_10_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[19]">EXTI1_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[1a]">EXTI2_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[1b]">EXTI3_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[1c]">EXTI4_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[27]">EXTI9_5_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[16]">FLASH_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[26]">FlexCAN1_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[4b]">FlexCAN2_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[9]">HardFault_Handler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[2f]">I2C1_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[30]">I2C2_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[53]">LPTIM_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[54]">LPUART_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[0]">Loop_1000Hz</a> from scheduler.o(.text) referenced 2 times from scheduler.o(.data.sched_tasks)
 <LI><a href="#[3]">Loop_100Hz</a> from scheduler.o(.text) referenced 2 times from scheduler.o(.data.sched_tasks)
 <LI><a href="#[2]">Loop_200Hz</a> from scheduler.o(.text) referenced 2 times from scheduler.o(.data.sched_tasks)
 <LI><a href="#[5]">Loop_20Hz</a> from scheduler.o(.text) referenced 2 times from scheduler.o(.data.sched_tasks)
 <LI><a href="#[6]">Loop_2Hz</a> from scheduler.o(.text) referenced 2 times from scheduler.o(.data.sched_tasks)
 <LI><a href="#[1]">Loop_500Hz</a> from scheduler.o(.text) referenced 2 times from scheduler.o(.data.sched_tasks)
 <LI><a href="#[4]">Loop_50Hz</a> from scheduler.o(.text) referenced 2 times from scheduler.o(.data.sched_tasks)
 <LI><a href="#[a]">MemManage_Handler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[8]">NMI_Handler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[13]">PVD_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[10]">PendSV_Handler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[52]">QSPI_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[17]">RCC_CRS_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[37]">RTC_ALR_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[15]">RTC_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[7]">Reset_Handler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[31]">SPI1_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[32]">SPI2_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[3e]">SPI3_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[e]">SVC_Handler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[d]">SecureFault_Handler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[11]">SysTick_Handler</a> from board_it.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[28]">TIM1_BRK_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[2b]">TIM1_CC_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[2a]">TIM1_TRG_COM_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[29]">TIM1_UP_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[2c]">TIM2_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[2d]">TIM3_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[2e]">TIM4_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[3d]">TIM5_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[41]">TIM6_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[42]">TIM7_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[39]">TIM8_BRK_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[3c]">TIM8_CC_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[3b]">TIM8_TRG_COM_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[3a]">TIM8_UP_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[33]">UART1_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[34]">UART2_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[35]">UART3_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[3f]">UART4_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[40]">UART5_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[50]">UART6_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[51]">UART7_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[4c]">USB_FS_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[38]">USB_WKUP_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[c]">UsageFault_Handler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[12]">WWDG_IWDG_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[59]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[58]">fputc</a> from board_init.o(.text) referenced from printfa.o(i.__0printf)
 <LI><a href="#[5d]">mad_layer_I</a> from layer12.o(.text) referenced from frame.o(.rodata.decoder_table)
 <LI><a href="#[5e]">mad_layer_II</a> from layer12.o(.text) referenced from frame.o(.rodata.decoder_table)
 <LI><a href="#[5f]">mad_layer_III</a> from layer3.o(.text) referenced from frame.o(.rodata.decoder_table)
 <LI><a href="#[55]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[5b]">sdspi_spi_freq</a> from sdspi_port.o(.text) referenced from sdspi_port.o(.rodata.board_sdspi_if)
 <LI><a href="#[5a]">sdspi_spi_init</a> from sdspi_port.o(.text) referenced from sdspi_port.o(.rodata.board_sdspi_if)
 <LI><a href="#[5c]">sdspi_spi_xfer</a> from sdspi_port.o(.text) referenced from sdspi_port.o(.rodata.board_sdspi_if)
 <LI><a href="#[56]">synth_full</a> from synth.o(.text) referenced 2 times from synth.o(.text)
 <LI><a href="#[57]">synth_half</a> from synth.o(.text) referenced 2 times from synth.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[60]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[157]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry4.o(.ARM.Collect$$$$00000003))

<P><STRONG><a name="[61]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[14e]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[158]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[159]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[15a]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[15b]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[15c]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[55]"></a>main</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = main &rArr; fatFs_init &rArr; f_open &rArr; dir_register &rArr; dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; SDSPI_ReadBlocks &rArr; SDSPI_StopTrans &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler_Run
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler_Setup
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatFs_init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[66]"></a>fatFs_init</STRONG> (Thumb, 268 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = fatFs_init &rArr; f_open &rArr; dir_register &rArr; dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; SDSPI_ReadBlocks &rArr; SDSPI_StopTrans &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[67]"></a>Scheduler_Setup</STRONG> (Thumb, 120 bytes, Stack size 4 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Scheduler_Setup
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[69]"></a>Scheduler_Run</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Scheduler_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysRunTimeMs
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_libmad_PlayHandler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[68]"></a>AUDIO_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, audio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = AUDIO_Init &rArr; Audio_ScanFiles &rArr;  Audio_ScanFiles (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_ScanFiles
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[70]"></a>Audio_ScanFiles</STRONG> (Thumb, 554 bytes, Stack size 64 bytes, audio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + In Cycle
<LI>Call Chain = Audio_ScanFiles &rArr;  Audio_ScanFiles (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_ScanFiles
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_ScanFiles
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Init
</UL>

<P><STRONG><a name="[6f]"></a>Audio_Task</STRONG> (Thumb, 766 bytes, Stack size 48 bytes, audio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = Audio_Task &rArr; WAV_PlaySong &rArr; WAV_DecodeFile &rArr; f_open &rArr; dir_register &rArr; dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; SDSPI_ReadBlocks &rArr; SDSPI_StopTrans &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_libmad_PlaySong
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_PlaySong
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_2Hz
</UL>

<P><STRONG><a name="[7b]"></a>WAV_PrepareData</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, wav.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = WAV_PrepareData &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; disk_read &rArr; SDSPI_ReadBlocks &rArr; SDSPI_StopTrans &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH5_IRQHandler
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_PlaySong
</UL>

<P><STRONG><a name="[7c]"></a>WAV_PlayHandler</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, wav.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = WAV_PlayHandler &rArr; f_close &rArr; f_sync &rArr; move_window &rArr; disk_read &rArr; SDSPI_ReadBlocks &rArr; SDSPI_StopTrans &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_PowerON
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableChannel
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_DMA_Transfer
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH5_IRQHandler
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_PlaySong
</UL>

<P><STRONG><a name="[78]"></a>WAV_PlaySong</STRONG> (Thumb, 274 bytes, Stack size 160 bytes, wav.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = WAV_PlaySong &rArr; WAV_DecodeFile &rArr; f_open &rArr; dir_register &rArr; dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; SDSPI_ReadBlocks &rArr; SDSPI_StopTrans &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Configure
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_PowerON
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_PlayHandler
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_PrepareData
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_DecodeFile
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_Task
</UL>

<P><STRONG><a name="[8c]"></a>MP3_libmad_MadErrorString</STRONG> (Thumb, 488 bytes, Stack size 12 bytes, mp3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MP3_libmad_MadErrorString
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_libmad_PlaySong
</UL>

<P><STRONG><a name="[8f]"></a>MP3_libmad_MadFixedToSshort</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, mp3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MP3_libmad_MadFixedToSshort
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_libmad_PlaySong
</UL>

<P><STRONG><a name="[82]"></a>MP3_libmad_PrintFrameInfo</STRONG> (Thumb, 336 bytes, Stack size 56 bytes, mp3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MP3_libmad_PrintFrameInfo &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_libmad_PlaySong
</UL>

<P><STRONG><a name="[83]"></a>MP3_libmad_PlayHandler</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, mp3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MP3_libmad_PlayHandler &rArr; I2S_Configure &rArr; I2S_InitMaster
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Configure
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_DMA_Transfer
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler_Run
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_libmad_PlaySong
</UL>

<P><STRONG><a name="[79]"></a>MP3_libmad_PlaySong</STRONG> (Thumb, 1192 bytes, Stack size 88 bytes, mp3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = MP3_libmad_PlaySong &rArr; f_open &rArr; dir_register &rArr; dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; SDSPI_ReadBlocks &rArr; SDSPI_StopTrans &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_timer_string
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_stream_finish
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_frame_finish
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_synth_frame
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_timer_add
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_frame_decode
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_stream_buffer
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_synth_init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_frame_init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_stream_init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_libmad_PlayHandler
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_libmad_PrintFrameInfo
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_libmad_MadFixedToSshort
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_libmad_MadErrorString
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_PowerON
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableChannel
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_Task
</UL>

<P><STRONG><a name="[63]"></a>BOARD_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, board_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = BOARD_Init &rArr; BOARD_InitPins &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitBootClocks
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[95]"></a>BOARD_InitDebugConsole</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, board_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BOARD_InitDebugConsole &rArr; UART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Enable
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_Init
</UL>

<P><STRONG><a name="[58]"></a>fputc</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, board_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fputc &rArr; UART_PutData
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PutData
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[9a]"></a>fgetc</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, board_init.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetData
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetStatus
</UL>

<P><STRONG><a name="[93]"></a>BOARD_InitBootClocks</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, clock_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BOARD_InitBootClocks &rArr; RCC_EnableAHB1Periphs
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ResetAHB1Periphs
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAHB1Periphs
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ResetAPB1Periphs
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB1Periphs
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ResetAPB2Periphs
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2Periphs
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_BootToHSE120MHz
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ResetToDefault
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_Init
</UL>

<P><STRONG><a name="[9c]"></a>CLOCK_ResetToDefault</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, clock_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitBootClocks
</UL>

<P><STRONG><a name="[9d]"></a>CLOCK_BootToHSE120MHz</STRONG> (Thumb, 212 bytes, Stack size 0 bytes, clock_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitBootClocks
</UL>

<P><STRONG><a name="[64]"></a>SysTick_Init</STRONG> (Thumb, 88 bytes, Stack size 4 bytes, board_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SysTick_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11]"></a>SysTick_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, board_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>GetSysRunTimeMs</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, board_it.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler_Run
</UL>

<P><STRONG><a name="[15d]"></a>delay_us</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, board_it.o(.text), UNUSED)

<P><STRONG><a name="[15e]"></a>delay_ms</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, board_it.o(.text), UNUSED)

<P><STRONG><a name="[94]"></a>BOARD_InitPins</STRONG> (Thumb, 454 bytes, Stack size 64 bytes, pin_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BOARD_InitPins &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConf
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_Init
</UL>

<P><STRONG><a name="[5a]"></a>sdspi_spi_init</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, sdspi_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = sdspi_spi_init &rArr; SPI_InitMaster &rArr; SPI_SetBaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Enable
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_InitMaster
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdspi_port.o(.rodata.board_sdspi_if)
</UL>
<P><STRONG><a name="[5b]"></a>sdspi_spi_freq</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, sdspi_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sdspi_spi_freq &rArr; SPI_SetBaudRate
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetBaudRate
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdspi_port.o(.rodata.board_sdspi_if)
</UL>
<P><STRONG><a name="[5c]"></a>sdspi_spi_xfer</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, sdspi_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sdspi_spi_xfer &rArr; spi_xfer &rArr; app_spi_putbyte &rArr; SPI_PutData
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_xfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdspi_port.o(.rodata.board_sdspi_if)
</UL>
<P><STRONG><a name="[a9]"></a>SPI_SetBaudRate</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, sdspi_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_SetBaudRate
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdspi_spi_freq
</UL>

<P><STRONG><a name="[ab]"></a>app_spi_putbyte</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, sdspi_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_spi_putbyte &rArr; SPI_PutData
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PutData
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_xfer
</UL>

<P><STRONG><a name="[ae]"></a>app_spi_getbyte</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sdspi_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = app_spi_getbyte &rArr; SPI_GetData
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetData
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_xfer
</UL>

<P><STRONG><a name="[aa]"></a>spi_xfer</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sdspi_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = spi_xfer &rArr; app_spi_putbyte &rArr; SPI_PutData
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_getbyte
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_putbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdspi_spi_xfer
</UL>

<P><STRONG><a name="[b0]"></a>spi_assert_cs</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, sdspi_port.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>

<P><STRONG><a name="[81]"></a>I2S_Configure</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, i2s_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = I2S_Configure &rArr; I2S_InitMaster
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Enable
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_EnableDMA
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_InitMaster
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_libmad_PlayHandler
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_PlaySong
</UL>

<P><STRONG><a name="[7d]"></a>I2S_DMA_Transfer</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, i2s_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2S_DMA_Transfer &rArr; DMA_EnableChannelInterrupts
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableChannelInterrupts
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_InitChannel
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_GetTxDataRegAddr
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_libmad_PlayHandler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_PlayHandler
</UL>

<P><STRONG><a name="[7f]"></a>I2S_PowerON</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, i2s_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2S_PowerON
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_PlayHandler
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_libmad_PlaySong
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_PlaySong
</UL>

<P><STRONG><a name="[21]"></a>DMA1_CH5_IRQHandler</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, i2s_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = DMA1_CH5_IRQHandler &rArr; WAV_PrepareData &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; disk_read &rArr; SDSPI_ReadBlocks &rArr; SDSPI_StopTrans &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearChannelInterruptStatus
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetChannelInterruptStatus
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableChannel
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_PlayHandler
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_PrepareData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>DMA_InitChannel</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, hal_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_InitChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_DMA_Transfer
</UL>

<P><STRONG><a name="[b6]"></a>DMA_EnableChannelInterrupts</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, hal_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_EnableChannelInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_DMA_Transfer
</UL>

<P><STRONG><a name="[b8]"></a>DMA_GetChannelInterruptStatus</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hal_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_GetChannelInterruptStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH5_IRQHandler
</UL>

<P><STRONG><a name="[b9]"></a>DMA_ClearChannelInterruptStatus</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, hal_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_ClearChannelInterruptStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH5_IRQHandler
</UL>

<P><STRONG><a name="[7e]"></a>DMA_EnableChannel</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, hal_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_EnableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_CH5_IRQHandler
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_DMA_Transfer
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_PlayHandler
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_libmad_PlaySong
</UL>

<P><STRONG><a name="[15f]"></a>DMA_EnableBurstMode</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, hal_dma.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>GPIO_Init</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, hal_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>

<P><STRONG><a name="[160]"></a>GPIO_ReadInDataBit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[161]"></a>GPIO_ReadInData</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[162]"></a>GPIO_ReadOutDataBit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[163]"></a>GPIO_ReadOutData</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[164]"></a>GPIO_SetBits</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[165]"></a>GPIO_ClearBits</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>GPIO_WriteBit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hal_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_assert_cs
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdspi_spi_init
</UL>

<P><STRONG><a name="[166]"></a>GPIO_WriteBits</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[167]"></a>GPIO_PinLock</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>GPIO_PinLockConf</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>GPIO_PinAFConf</STRONG> (Thumb, 192 bytes, Stack size 20 bytes, hal_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConf
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>

<P><STRONG><a name="[169]"></a>GPIO_PortAFConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>I2S_InitMaster</STRONG> (Thumb, 344 bytes, Stack size 28 bytes, hal_i2s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = I2S_InitMaster
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Configure
</UL>

<P><STRONG><a name="[b3]"></a>I2S_Enable</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hal_i2s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2S_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Configure
</UL>

<P><STRONG><a name="[16a]"></a>I2S_GetStatus</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, hal_i2s.o(.text), UNUSED)

<P><STRONG><a name="[16b]"></a>I2S_EnableInterrupts</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, hal_i2s.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>I2S_GetInterruptStatus</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, hal_i2s.o(.text), UNUSED)

<P><STRONG><a name="[16d]"></a>I2S_ClearInterruptStatus</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hal_i2s.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>I2S_PutData</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hal_i2s.o(.text), UNUSED)

<P><STRONG><a name="[16f]"></a>I2S_GetData</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, hal_i2s.o(.text), UNUSED)

<P><STRONG><a name="[170]"></a>I2S_GetXferChannel</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hal_i2s.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>I2S_EnableDMA</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hal_i2s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2S_EnableDMA
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Configure
</UL>

<P><STRONG><a name="[171]"></a>I2S_GetRxDataRegAddr</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, hal_i2s.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>I2S_GetTxDataRegAddr</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, hal_i2s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2S_GetTxDataRegAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_DMA_Transfer
</UL>

<P><STRONG><a name="[a2]"></a>RCC_EnableAHB1Periphs</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, hal_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_EnableAHB1Periphs
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitBootClocks
</UL>

<P><STRONG><a name="[a0]"></a>RCC_EnableAPB1Periphs</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, hal_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_EnableAPB1Periphs
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitBootClocks
</UL>

<P><STRONG><a name="[9e]"></a>RCC_EnableAPB2Periphs</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, hal_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_EnableAPB2Periphs
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitBootClocks
</UL>

<P><STRONG><a name="[a3]"></a>RCC_ResetAHB1Periphs</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, hal_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RCC_ResetAHB1Periphs
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitBootClocks
</UL>

<P><STRONG><a name="[a1]"></a>RCC_ResetAPB1Periphs</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, hal_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RCC_ResetAPB1Periphs
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitBootClocks
</UL>

<P><STRONG><a name="[9f]"></a>RCC_ResetAPB2Periphs</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, hal_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RCC_ResetAPB2Periphs
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitBootClocks
</UL>

<P><STRONG><a name="[172]"></a>RCC_SetMCOConf</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[173]"></a>RCC_SetADCClockDiv</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[174]"></a>RCC_SetADCCalibClockDiv</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[175]"></a>RCC_SetDACClockDiv</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>RCC_EnableFSMCSyncMode</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[177]"></a>RCC_SetFSMCClockDiv</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[178]"></a>RCC_SetTPIUClockDiv</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[179]"></a>RCC_EanbleBKPWriteProtect</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>RCC_EanbleBKPReset</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[17b]"></a>RCC_EanbleRTCClock</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[17c]"></a>RCC_SetRTCClockSource</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>RCC_EanbleLSEBypassMode</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[17e]"></a>GetLSEReadyStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[17f]"></a>RCC_EanbleLSEClock</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[180]"></a>GetResetStatus</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>ClearResetStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>RCC_EanbleCPULock</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>RCC_EanblePVDReset</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[184]"></a>RCC_EanbleLSIClockOutput</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[185]"></a>RCC_EanbleLSIClock</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>SPI_SetBaudrate</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_SetBaudrate
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_InitMaster
</UL>

<P><STRONG><a name="[a7]"></a>SPI_InitMaster</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_InitMaster &rArr; SPI_SetBaudrate
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetBaudrate
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdspi_spi_init
</UL>

<P><STRONG><a name="[186]"></a>SPI_InitSlave</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, hal_spi.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>SPI_Enable</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdspi_spi_freq
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdspi_spi_init
</UL>

<P><STRONG><a name="[ac]"></a>SPI_GetStatus</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SPI_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_getbyte
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_putbyte
</UL>

<P><STRONG><a name="[187]"></a>SPI_EnableInterrupts</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, hal_spi.o(.text), UNUSED)

<P><STRONG><a name="[188]"></a>SPI_GetInterruptStatus</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, hal_spi.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>SPI_ClearInterruptStatus</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hal_spi.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>SPI_PutData</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_PutData
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_putbyte
</UL>

<P><STRONG><a name="[af]"></a>SPI_GetData</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, hal_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SPI_GetData
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_spi_getbyte
</UL>

<P><STRONG><a name="[18a]"></a>SPI_EnableDMA</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hal_spi.o(.text), UNUSED)

<P><STRONG><a name="[18b]"></a>SPI_GetEnabledInterrupts</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, hal_spi.o(.text), UNUSED)

<P><STRONG><a name="[18c]"></a>SPI_GetRxDataRegAddr</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, hal_spi.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>SPI_GetTxDataRegAddr</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, hal_spi.o(.text), UNUSED)

<P><STRONG><a name="[18e]"></a>SPI_EnableCS</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hal_spi.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>SPI_SetRxDataNum</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hal_spi.o(.text), UNUSED)

<P><STRONG><a name="[190]"></a>SPI_SetPadMux</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hal_spi.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>UART_Init</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
</UL>

<P><STRONG><a name="[97]"></a>UART_Enable</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
</UL>

<P><STRONG><a name="[191]"></a>UART_EnableInterrupts</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[192]"></a>UART_GetEnabledInterrupts</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>UART_EnableDMA</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>UART_PutData</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_PutData
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[9b]"></a>UART_GetData</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, hal_uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[98]"></a>UART_GetStatus</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UART_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[194]"></a>UART_GetInterruptStatus</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[195]"></a>UART_ClearInterruptStatus</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[196]"></a>UART_GetRxDataRegAddr</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[197]"></a>UART_GetTxDataRegAddr</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>SystemInit</STRONG> (Thumb, 276 bytes, Stack size 12 bytes, system_mm32f5277e.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SystemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[7]"></a>Reset_Handler</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = Reset_Handler &rArr; SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>BKP_TAMPER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>COMP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_CH1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_CH2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_CH3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_CH4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_CH6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_CH7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_CH8_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_CH1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_CH2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_CH3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_CH4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_CH5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA2_CH6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_CH7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_CH8_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[198]"></a>Default_Handler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>ENET_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>ENET_WKUP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>FLASH_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>FlexCAN1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>FlexCAN2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2C2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>LPTIM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>LPUART_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>PVD_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>QSPI_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>RCC_CRS_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>RTC_ALR_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>RTC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>SPI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SPI3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SecureFault_Handler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>UART1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>UART2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>UART3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>UART5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>UART6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>UART7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>USB_FS_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>USB_WKUP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>WWDG_IWDG_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[bc]"></a>SDSPI_SendCid</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, sdspi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_DecodeCid
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_Read
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendCmd
</UL>

<P><STRONG><a name="[c2]"></a>SDSPI_Init</STRONG> (Thumb, 338 bytes, Stack size 40 bytes, sdspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SDSPI_Init &rArr; SDSPI_AppSendOpCond &rArr; SDSPI_SendAppCmd &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendScr
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendCsd
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SetBlockSize
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_ReadOcr
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_AppSendOpCond
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendIfCond
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_GoIdle
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[cd]"></a>SDSPI_Deinit</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sdspi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[d2]"></a>SDSPI_CheckReadOnly</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, sdspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDSPI_CheckReadOnly
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_WriteBlocks
</UL>

<P><STRONG><a name="[cf]"></a>SDSPI_ReadBlocks</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, sdspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SDSPI_ReadBlocks &rArr; SDSPI_StopTrans &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_StopTrans
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_Read
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[d1]"></a>SDSPI_WriteBlocks</STRONG> (Thumb, 274 bytes, Stack size 48 bytes, sdspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SDSPI_WriteBlocks &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_CheckReadOnly
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_Write
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_WaitReady
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[d4]"></a>SDSPI_EraseBlocksPre</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, sdspi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendAppCmd
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendCmd
</UL>

<P><STRONG><a name="[d5]"></a>SDSPI_EraseBlocks</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, sdspi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_Erase
</UL>

<P><STRONG><a name="[d7]"></a>SDSPI_SwitchToHighSpeed</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, sdspi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SelectFunction
</UL>

<P><STRONG><a name="[df]"></a>disk_status</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[da]"></a>disk_initialize</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = disk_initialize &rArr; SDSPI_Init &rArr; SDSPI_AppSendOpCond &rArr; SDSPI_SendAppCmd &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[db]"></a>disk_read</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = disk_read &rArr; SDSPI_ReadBlocks &rArr; SDSPI_StopTrans &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_ReadBlocks
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[dc]"></a>disk_write</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = disk_write &rArr; SDSPI_WriteBlocks &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_WriteBlocks
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
</UL>

<P><STRONG><a name="[f9]"></a>disk_ioctl</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[6a]"></a>f_mount</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = f_mount &rArr; mount_volume &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; disk_read &rArr; SDSPI_ReadBlocks &rArr; SDSPI_StopTrans &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatFs_init
</UL>

<P><STRONG><a name="[6b]"></a>f_open</STRONG> (Thumb, 840 bytes, Stack size 104 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; SDSPI_ReadBlocks &rArr; SDSPI_StopTrans &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_DecodeFile
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_libmad_PlaySong
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_PlaySong
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatFs_init
</UL>

<P><STRONG><a name="[6c]"></a>f_read</STRONG> (Thumb, 620 bytes, Stack size 64 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; disk_read &rArr; SDSPI_ReadBlocks &rArr; SDSPI_StopTrans &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_PrepareData
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_DecodeFile
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_libmad_PlaySong
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatFs_init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_gets
</UL>

<P><STRONG><a name="[f5]"></a>f_write</STRONG> (Thumb, 726 bytes, Stack size 64 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_flush
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
</UL>

<P><STRONG><a name="[f7]"></a>f_sync</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = f_sync &rArr; move_window &rArr; disk_read &rArr; SDSPI_ReadBlocks &rArr; SDSPI_StopTrans &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[6d]"></a>f_close</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = f_close &rArr; f_sync &rArr; move_window &rArr; disk_read &rArr; SDSPI_ReadBlocks &rArr; SDSPI_StopTrans &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_PlayHandler
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_DecodeFile
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_libmad_PlaySong
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatFs_init
</UL>

<P><STRONG><a name="[88]"></a>f_lseek</STRONG> (Thumb, 638 bytes, Stack size 48 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; SDSPI_ReadBlocks &rArr; SDSPI_StopTrans &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_libmad_PlaySong
</UL>

<P><STRONG><a name="[71]"></a>f_opendir</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; SDSPI_ReadBlocks &rArr; SDSPI_StopTrans &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_ScanFiles
</UL>

<P><STRONG><a name="[76]"></a>f_closedir</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = f_closedir &rArr; validate &rArr; disk_status
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_ScanFiles
</UL>

<P><STRONG><a name="[72]"></a>f_readdir</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = f_readdir &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; SDSPI_ReadBlocks &rArr; SDSPI_StopTrans &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_ScanFiles
</UL>

<P><STRONG><a name="[fe]"></a>f_stat</STRONG> (Thumb, 100 bytes, Stack size 64 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[ff]"></a>f_getfree</STRONG> (Thumb, 362 bytes, Stack size 64 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[100]"></a>f_truncate</STRONG> (Thumb, 326 bytes, Stack size 32 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[101]"></a>f_unlink</STRONG> (Thumb, 292 bytes, Stack size 112 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[103]"></a>f_mkdir</STRONG> (Thumb, 382 bytes, Stack size 104 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[104]"></a>f_rename</STRONG> (Thumb, 486 bytes, Stack size 160 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
</UL>

<P><STRONG><a name="[105]"></a>f_mkfs</STRONG> (Thumb, 2398 bytes, Stack size 184 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[107]"></a>f_gets</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[108]"></a>f_putc</STRONG> (Thumb, 40 bytes, Stack size 96 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_flush
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_init
</UL>

<P><STRONG><a name="[10c]"></a>f_puts</STRONG> (Thumb, 52 bytes, Stack size 96 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_flush
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_init
</UL>

<P><STRONG><a name="[10d]"></a>f_printf</STRONG> (Thumb, 1168 bytes, Stack size 208 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_flush
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_init
</UL>

<P><STRONG><a name="[118]"></a>mad_bit_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mad_bit_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_frame_decode
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_stream_buffer
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_stream_init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_III
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_stream_sync
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_header_decode
</UL>

<P><STRONG><a name="[11f]"></a>mad_bit_length</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mad_bit_length
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_frame_decode
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_scalefactors
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_scalefactors_lsf
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_II
</UL>

<P><STRONG><a name="[11a]"></a>mad_bit_nextbyte</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mad_bit_nextbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_III
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_stream_sync
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_bitrate
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_header_decode
</UL>

<P><STRONG><a name="[11e]"></a>mad_bit_skip</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mad_bit_skip
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_huffdecode
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_III
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_bitrate
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_header
</UL>

<P><STRONG><a name="[114]"></a>mad_bit_read</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mad_bit_read
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II_samples
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_sample
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_huffdecode
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_scalefactors
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_scalefactors_lsf
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_sideinfo
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_III
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_II
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_I
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_header
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_crc
</UL>

<P><STRONG><a name="[113]"></a>mad_bit_crc</STRONG> (Thumb, 362 bytes, Stack size 56 bytes, bit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mad_bit_crc &rArr; mad_bit_read
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_read
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_III
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_II
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_I
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_header
</UL>

<P><STRONG><a name="[115]"></a>mad_header_init</STRONG> (Thumb, 68 bytes, Stack size 4 bytes, frame.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mad_header_init
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_frame_init
</UL>

<P><STRONG><a name="[85]"></a>mad_frame_init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, frame.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mad_frame_init &rArr; mad_frame_mute
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_header_init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_frame_mute
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_libmad_PlaySong
</UL>

<P><STRONG><a name="[116]"></a>mad_frame_mute</STRONG> (Thumb, 206 bytes, Stack size 12 bytes, frame.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mad_frame_mute
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_frame_init
</UL>

<P><STRONG><a name="[90]"></a>mad_frame_finish</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, frame.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mad_frame_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_libmad_PlaySong
</UL>

<P><STRONG><a name="[117]"></a>mad_header_decode</STRONG> (Thumb, 732 bytes, Stack size 56 bytes, frame.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = mad_header_decode &rArr; free_bitrate &rArr; decode_header &rArr; mad_bit_crc &rArr; mad_bit_read
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_timer_set
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_stream_sync
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_bitrate
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_header
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_nextbyte
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_frame_decode
</UL>

<P><STRONG><a name="[8b]"></a>mad_frame_decode</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, frame.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = mad_frame_decode &rArr; mad_header_decode &rArr; free_bitrate &rArr; decode_header &rArr; mad_bit_crc &rArr; mad_bit_read
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_header_decode
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_length
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_init
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_libmad_PlaySong
</UL>

<P><STRONG><a name="[5f]"></a>mad_layer_III</STRONG> (Thumb, 902 bytes, Stack size 368 bytes, layer3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 7664<LI>Call Chain = mad_layer_III &rArr; III_decode &rArr; III_reorder &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_decode
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_sideinfo
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_crc
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_read
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_skip
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_nextbyte
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frame.o(.rodata.decoder_table)
</UL>
<P><STRONG><a name="[5d]"></a>mad_layer_I</STRONG> (Thumb, 856 bytes, Stack size 192 bytes, layer12.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = mad_layer_I &rArr; mad_bit_crc &rArr; mad_bit_read
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_sample
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_crc
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frame.o(.rodata.decoder_table)
</UL>
<P><STRONG><a name="[5e]"></a>mad_layer_II</STRONG> (Thumb, 1758 bytes, Stack size 416 bytes, layer12.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = mad_layer_II &rArr; II_samples &rArr; mad_bit_read
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;II_samples
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_crc
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_read
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_length
</UL>
<BR>[Address Reference Count : 1]<UL><LI> frame.o(.rodata.decoder_table)
</UL>
<P><STRONG><a name="[84]"></a>mad_stream_init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stream.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mad_stream_init &rArr; mad_bit_init
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_init
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_libmad_PlaySong
</UL>

<P><STRONG><a name="[91]"></a>mad_stream_finish</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, stream.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mad_stream_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_libmad_PlaySong
</UL>

<P><STRONG><a name="[8a]"></a>mad_stream_buffer</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, stream.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mad_stream_buffer &rArr; mad_bit_init
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_init
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_libmad_PlaySong
</UL>

<P><STRONG><a name="[199]"></a>mad_stream_skip</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stream.o(.text), UNUSED)

<P><STRONG><a name="[119]"></a>mad_stream_sync</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, stream.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mad_stream_sync &rArr; mad_bit_nextbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_nextbyte
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_init
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_bitrate
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_header_decode
</UL>

<P><STRONG><a name="[19a]"></a>mad_stream_errorstr</STRONG> (Thumb, 526 bytes, Stack size 12 bytes, stream.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>mad_synth_init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, synth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mad_synth_init &rArr; mad_synth_mute
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_synth_mute
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_libmad_PlaySong
</UL>

<P><STRONG><a name="[136]"></a>mad_synth_mute</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, synth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mad_synth_mute
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_synth_init
</UL>

<P><STRONG><a name="[8e]"></a>mad_synth_frame</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, synth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mad_synth_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_libmad_PlaySong
</UL>

<P><STRONG><a name="[19b]"></a>mad_timer_compare</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[139]"></a>mad_timer_negate</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mad_timer_negate
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_timer_multiply
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_timer_abs
</UL>

<P><STRONG><a name="[138]"></a>mad_timer_abs</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mad_timer_abs &rArr; mad_timer_negate
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_timer_negate
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_timer_string
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_timer_fraction
</UL>

<P><STRONG><a name="[11c]"></a>mad_timer_set</STRONG> (Thumb, 436 bytes, Stack size 32 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = mad_timer_set &rArr; scale_rational &rArr; reduce_rational &rArr; gcd
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reduce_timer
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scale_rational
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_header_decode
</UL>

<P><STRONG><a name="[8d]"></a>mad_timer_add</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mad_timer_add &rArr; reduce_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reduce_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_libmad_PlaySong
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_timer_multiply
</UL>

<P><STRONG><a name="[13d]"></a>mad_timer_multiply</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_timer_add
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_timer_negate
</UL>

<P><STRONG><a name="[13e]"></a>mad_timer_count</STRONG> (Thumb, 436 bytes, Stack size 40 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + In Cycle
<LI>Call Chain = mad_timer_count &rArr;  mad_timer_count (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_timer_count
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scale_rational
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_timer_string
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_timer_count
</UL>

<P><STRONG><a name="[13f]"></a>mad_timer_fraction</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_timer_abs
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scale_rational
</UL>

<P><STRONG><a name="[92]"></a>mad_timer_string</STRONG> (Thumb, 1036 bytes, Stack size 112 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = mad_timer_string &rArr; mad_timer_count &rArr;  mad_timer_count (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_timer_count
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_timer_abs
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scale_rational
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_libmad_PlaySong
</UL>

<P><STRONG><a name="[19c]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[f4]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_III
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>

<P><STRONG><a name="[12f]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_reorder
</UL>

<P><STRONG><a name="[89]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_libmad_PlaySong
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_III
</UL>

<P><STRONG><a name="[19d]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[19e]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_Read
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[19f]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1a0]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_DecodeFile
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_libmad_PlaySong
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_PlaySong
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_Task
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
</UL>

<P><STRONG><a name="[ce]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_Deinit
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SelectFunction
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[1a1]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[77]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_Task
</UL>

<P><STRONG><a name="[112]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[73]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_ScanFiles
</UL>

<P><STRONG><a name="[10f]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[75]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_ScanFiles
</UL>

<P><STRONG><a name="[87]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_libmad_PlaySong
</UL>

<P><STRONG><a name="[142]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[147]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[148]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[149]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1a2]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[14a]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[143]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[1a3]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[14b]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[1a4]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[144]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1a5]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[1a6]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[146]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>

<P><STRONG><a name="[145]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[14c]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[14d]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[153]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[62]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1a7]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1a8]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[1a9]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[14f]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1aa]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1ab]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1ac]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[65]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = printf
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_libmad_PlayHandler
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_libmad_PrintFrameInfo
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_PlayHandler
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_DecodeFile
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_libmad_PlaySong
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_PlaySong
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_ScanFiles
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_Task
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_Init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatFs_init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[151]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1ad]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1ae]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1af]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[74]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_timer_string
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_DecodeFile
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_libmad_PlaySong
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_PlaySong
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_ScanFiles
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_Task
</UL>

<P><STRONG><a name="[1b0]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1b1]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1b2]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[0]"></a>Loop_1000Hz</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, scheduler.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scheduler.o(.data.sched_tasks)
</UL>
<P><STRONG><a name="[1]"></a>Loop_500Hz</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, scheduler.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scheduler.o(.data.sched_tasks)
</UL>
<P><STRONG><a name="[2]"></a>Loop_200Hz</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, scheduler.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scheduler.o(.data.sched_tasks)
</UL>
<P><STRONG><a name="[3]"></a>Loop_100Hz</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, scheduler.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scheduler.o(.data.sched_tasks)
</UL>
<P><STRONG><a name="[4]"></a>Loop_50Hz</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, scheduler.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scheduler.o(.data.sched_tasks)
</UL>
<P><STRONG><a name="[5]"></a>Loop_20Hz</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, scheduler.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scheduler.o(.data.sched_tasks)
</UL>
<P><STRONG><a name="[6]"></a>Loop_2Hz</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = Loop_2Hz &rArr; Audio_Task &rArr; WAV_PlaySong &rArr; WAV_DecodeFile &rArr; f_open &rArr; dir_register &rArr; dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; SDSPI_ReadBlocks &rArr; SDSPI_StopTrans &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio_Task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scheduler.o(.data.sched_tasks)
</UL>
<P><STRONG><a name="[80]"></a>WAV_DecodeFile</STRONG> (Thumb, 706 bytes, Stack size 32 bytes, wav.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = WAV_DecodeFile &rArr; f_open &rArr; dir_register &rArr; dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; SDSPI_ReadBlocks &rArr; SDSPI_StopTrans &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_PlaySong
</UL>

<P><STRONG><a name="[b7]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, i2s_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_DMA_Transfer
</UL>

<P><STRONG><a name="[bd]"></a>SDSPI_SendCmd</STRONG> (Thumb, 392 bytes, Stack size 48 bytes, sdspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_WaitReady
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_ReadBlocks
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendCid
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SwitchFunction
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_Erase
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_StopTrans
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendAppCmd
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendScr
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendCsd
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SetBlockSize
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_ReadOcr
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_AppSendOpCond
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendIfCond
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_GoIdle
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_EraseBlocksPre
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_WriteBlocks
</UL>

<P><STRONG><a name="[be]"></a>SDSPI_Read</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, sdspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SDSPI_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_ReadBlocks
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendCid
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SwitchFunction
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendScr
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendCsd
</UL>

<P><STRONG><a name="[bf]"></a>SDSPI_DecodeCid</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, sdspi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendCid
</UL>

<P><STRONG><a name="[c0]"></a>SDSPI_WaitReady</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, sdspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDSPI_WaitReady
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_Erase
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_Write
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendCmd
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_WriteBlocks
</UL>

<P><STRONG><a name="[c3]"></a>SDSPI_GoIdle</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, sdspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SDSPI_GoIdle &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_Init
</UL>

<P><STRONG><a name="[c4]"></a>SDSPI_SendIfCond</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, sdspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SDSPI_SendIfCond &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_Init
</UL>

<P><STRONG><a name="[c5]"></a>SDSPI_AppSendOpCond</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, sdspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SDSPI_AppSendOpCond &rArr; SDSPI_SendAppCmd &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendAppCmd
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_Init
</UL>

<P><STRONG><a name="[c6]"></a>SDSPI_ReadOcr</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, sdspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SDSPI_ReadOcr &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_Init
</UL>

<P><STRONG><a name="[c7]"></a>SDSPI_SetBlockSize</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, sdspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SDSPI_SetBlockSize &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_Init
</UL>

<P><STRONG><a name="[c8]"></a>SDSPI_SendCsd</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, sdspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SDSPI_SendCsd &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_DecodeCsd
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_Read
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_Init
</UL>

<P><STRONG><a name="[c9]"></a>SDSPI_SendScr</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, sdspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SDSPI_SendScr &rArr; SDSPI_SendAppCmd &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_DecodeScr
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendAppCmd
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_Read
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_Init
</UL>

<P><STRONG><a name="[ca]"></a>SDSPI_SendAppCmd</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, sdspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SDSPI_SendAppCmd &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendScr
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_AppSendOpCond
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_EraseBlocksPre
</UL>

<P><STRONG><a name="[cb]"></a>SDSPI_DecodeCsd</STRONG> (Thumb, 708 bytes, Stack size 12 bytes, sdspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SDSPI_DecodeCsd
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendCsd
</UL>

<P><STRONG><a name="[cc]"></a>SDSPI_DecodeScr</STRONG> (Thumb, 122 bytes, Stack size 12 bytes, sdspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SDSPI_DecodeScr
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendScr
</UL>

<P><STRONG><a name="[d0]"></a>SDSPI_StopTrans</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, sdspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SDSPI_StopTrans &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_ReadBlocks
</UL>

<P><STRONG><a name="[d3]"></a>SDSPI_Write</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, sdspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SDSPI_Write &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_WaitReady
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_WriteBlocks
</UL>

<P><STRONG><a name="[d6]"></a>SDSPI_Erase</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, sdspi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_WaitReady
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_EraseBlocks
</UL>

<P><STRONG><a name="[d8]"></a>SDSPI_SelectFunction</STRONG> (Thumb, 450 bytes, Stack size 112 bytes, sdspi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SwitchFunction
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SwitchToHighSpeed
</UL>

<P><STRONG><a name="[d9]"></a>SDSPI_SwitchFunction</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, sdspi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_Read
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SelectFunction
</UL>

<P><STRONG><a name="[dd]"></a>get_ldnumber</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[de]"></a>mount_volume</STRONG> (Thumb, 1044 bytes, Stack size 72 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = mount_volume &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; disk_read &rArr; SDSPI_ReadBlocks &rArr; SDSPI_StopTrans &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
</UL>

<P><STRONG><a name="[e0]"></a>find_volume</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; disk_read &rArr; SDSPI_ReadBlocks &rArr; SDSPI_StopTrans &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[e1]"></a>ld_word</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[e2]"></a>ld_dword</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[e3]"></a>move_window</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = move_window &rArr; disk_read &rArr; SDSPI_ReadBlocks &rArr; SDSPI_StopTrans &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[e4]"></a>follow_path</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; SDSPI_ReadBlocks &rArr; SDSPI_StopTrans &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
</UL>

<P><STRONG><a name="[e5]"></a>dir_register</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = dir_register &rArr; dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; SDSPI_ReadBlocks &rArr; SDSPI_StopTrans &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[e6]"></a>st_dword</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = st_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
</UL>

<P><STRONG><a name="[e7]"></a>ld_clust</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ld_clust &rArr; ld_word
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[e8]"></a>st_clust</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = st_clust &rArr; st_word
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[e9]"></a>remove_chain</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; SDSPI_ReadBlocks &rArr; SDSPI_StopTrans &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
</UL>

<P><STRONG><a name="[ea]"></a>get_fat</STRONG> (Thumb, 306 bytes, Stack size 40 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = get_fat &rArr; move_window &rArr; disk_read &rArr; SDSPI_ReadBlocks &rArr; SDSPI_StopTrans &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
</UL>

<P><STRONG><a name="[eb]"></a>clst2sect</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>

<P><STRONG><a name="[ec]"></a>dir_sdi</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; disk_read &rArr; SDSPI_ReadBlocks &rArr; SDSPI_StopTrans &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[ed]"></a>create_name</STRONG> (Thumb, 474 bytes, Stack size 56 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = create_name &rArr; dbc_2nd
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbc_2nd
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbc_1st
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[ee]"></a>dir_find</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; SDSPI_ReadBlocks &rArr; SDSPI_StopTrans &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[ef]"></a>dir_alloc</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; SDSPI_ReadBlocks &rArr; SDSPI_StopTrans &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[f0]"></a>st_word</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
</UL>

<P><STRONG><a name="[f1]"></a>put_fat</STRONG> (Thumb, 434 bytes, Stack size 48 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = put_fat &rArr; move_window &rArr; disk_read &rArr; SDSPI_ReadBlocks &rArr; SDSPI_StopTrans &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
</UL>

<P><STRONG><a name="[f2]"></a>sync_window</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = sync_window &rArr; disk_write &rArr; SDSPI_WriteBlocks &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[f3]"></a>validate</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = validate &rArr; disk_status
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>

<P><STRONG><a name="[f6]"></a>create_chain</STRONG> (Thumb, 482 bytes, Stack size 40 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; SDSPI_ReadBlocks &rArr; SDSPI_StopTrans &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[f8]"></a>sync_fs</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write &rArr; SDSPI_WriteBlocks &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[fa]"></a>dir_read</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; SDSPI_ReadBlocks &rArr; SDSPI_StopTrans &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[fb]"></a>get_fileinfo</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_fileinfo &rArr; ld_dword
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
</UL>

<P><STRONG><a name="[fc]"></a>dir_next</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; SDSPI_ReadBlocks &rArr; SDSPI_StopTrans &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[fd]"></a>dir_clear</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = dir_clear &rArr; sync_window &rArr; disk_write &rArr; SDSPI_WriteBlocks &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[102]"></a>dir_remove</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[106]"></a>create_partition</STRONG> (Thumb, 648 bytes, Stack size 72 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[109]"></a>putc_init</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_printf
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_puts
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_putc
</UL>

<P><STRONG><a name="[10a]"></a>putc_bfd</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_printf
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_puts
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_putc
</UL>

<P><STRONG><a name="[10b]"></a>putc_flush</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_printf
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_puts
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_putc
</UL>

<P><STRONG><a name="[10e]"></a>check_fs</STRONG> (Thumb, 328 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = check_fs &rArr; move_window &rArr; disk_read &rArr; SDSPI_ReadBlocks &rArr; SDSPI_StopTrans &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[110]"></a>dbc_1st</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dbc_1st
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[111]"></a>dbc_2nd</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dbc_2nd
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[11b]"></a>decode_header</STRONG> (Thumb, 610 bytes, Stack size 32 bytes, frame.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = decode_header &rArr; mad_bit_crc &rArr; mad_bit_read
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_crc
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_read
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_skip
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_bitrate
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_header_decode
</UL>

<P><STRONG><a name="[11d]"></a>free_bitrate</STRONG> (Thumb, 486 bytes, Stack size 168 bytes, frame.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = free_bitrate &rArr; decode_header &rArr; mad_bit_crc &rArr; mad_bit_read
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_stream_sync
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_header
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_skip
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_nextbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_header_decode
</UL>

<P><STRONG><a name="[120]"></a>III_sideinfo</STRONG> (Thumb, 686 bytes, Stack size 56 bytes, layer3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = III_sideinfo &rArr; mad_bit_read
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_read
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_III
</UL>

<P><STRONG><a name="[121]"></a>III_decode</STRONG> (Thumb, 1478 bytes, Stack size 4920 bytes, layer3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 7296<LI>Call Chain = III_decode &rArr; III_reorder &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_overlap_z
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_freqinver
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_imdct_s
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_overlap
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_imdct_l
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_aliasreduce
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_reorder
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_stereo
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_huffdecode
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_scalefactors
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_scalefactors_lsf
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_III
</UL>

<P><STRONG><a name="[122]"></a>III_scalefactors_lsf</STRONG> (Thumb, 870 bytes, Stack size 88 bytes, layer3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = III_scalefactors_lsf &rArr; mad_bit_read
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_read
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_length
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_decode
</UL>

<P><STRONG><a name="[123]"></a>III_scalefactors</STRONG> (Thumb, 584 bytes, Stack size 48 bytes, layer3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = III_scalefactors &rArr; mad_bit_read
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_read
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_length
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_decode
</UL>

<P><STRONG><a name="[124]"></a>III_huffdecode</STRONG> (Thumb, 1992 bytes, Stack size 432 bytes, layer3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = III_huffdecode &rArr; III_exponents
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_requantize
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_exponents
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_read
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_skip
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_decode
</UL>

<P><STRONG><a name="[125]"></a>III_stereo</STRONG> (Thumb, 1492 bytes, Stack size 196 bytes, layer3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = III_stereo
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_decode
</UL>

<P><STRONG><a name="[126]"></a>III_reorder</STRONG> (Thumb, 360 bytes, Stack size 2368 bytes, layer3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2376<LI>Call Chain = III_reorder &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_decode
</UL>

<P><STRONG><a name="[127]"></a>III_aliasreduce</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, layer3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = III_aliasreduce
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_decode
</UL>

<P><STRONG><a name="[128]"></a>III_imdct_l</STRONG> (Thumb, 702 bytes, Stack size 32 bytes, layer3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = III_imdct_l &rArr; imdct36 &rArr; dctIV &rArr; sdctII &rArr; fastsdct
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imdct36
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_decode
</UL>

<P><STRONG><a name="[129]"></a>III_overlap</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, layer3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = III_overlap
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_decode
</UL>

<P><STRONG><a name="[12a]"></a>III_imdct_s</STRONG> (Thumb, 760 bytes, Stack size 180 bytes, layer3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = III_imdct_s
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_decode
</UL>

<P><STRONG><a name="[12b]"></a>III_freqinver</STRONG> (Thumb, 204 bytes, Stack size 20 bytes, layer3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = III_freqinver
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_decode
</UL>

<P><STRONG><a name="[12c]"></a>III_overlap_z</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, layer3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = III_overlap_z
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_decode
</UL>

<P><STRONG><a name="[12d]"></a>III_exponents</STRONG> (Thumb, 420 bytes, Stack size 44 bytes, layer3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = III_exponents
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_huffdecode
</UL>

<P><STRONG><a name="[12e]"></a>III_requantize</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, layer3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = III_requantize
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_huffdecode
</UL>

<P><STRONG><a name="[130]"></a>imdct36</STRONG> (Thumb, 272 bytes, Stack size 96 bytes, layer3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = imdct36 &rArr; dctIV &rArr; sdctII &rArr; fastsdct
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dctIV
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;III_imdct_l
</UL>

<P><STRONG><a name="[131]"></a>dctIV</STRONG> (Thumb, 304 bytes, Stack size 96 bytes, layer3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = dctIV &rArr; sdctII &rArr; fastsdct
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdctII
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imdct36
</UL>

<P><STRONG><a name="[132]"></a>sdctII</STRONG> (Thumb, 436 bytes, Stack size 56 bytes, layer3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = sdctII &rArr; fastsdct
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fastsdct
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dctIV
</UL>

<P><STRONG><a name="[133]"></a>fastsdct</STRONG> (Thumb, 492 bytes, Stack size 144 bytes, layer3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = fastsdct
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdctII
</UL>

<P><STRONG><a name="[134]"></a>I_sample</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, layer12.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I_sample &rArr; mad_bit_read
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_read
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_I
</UL>

<P><STRONG><a name="[135]"></a>II_samples</STRONG> (Thumb, 254 bytes, Stack size 56 bytes, layer12.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = II_samples &rArr; mad_bit_read
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_bit_read
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_layer_II
</UL>

<P><STRONG><a name="[56]"></a>synth_full</STRONG> (Thumb, 1324 bytes, Stack size 96 bytes, synth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 828<LI>Call Chain = synth_full &rArr; dct32
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dct32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> synth.o(.text)
</UL>
<P><STRONG><a name="[57]"></a>synth_half</STRONG> (Thumb, 1340 bytes, Stack size 96 bytes, synth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 828<LI>Call Chain = synth_half &rArr; dct32
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dct32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> synth.o(.text)
</UL>
<P><STRONG><a name="[137]"></a>dct32</STRONG> (Thumb, 3508 bytes, Stack size 732 bytes, synth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 732<LI>Call Chain = dct32
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synth_half
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;synth_full
</UL>

<P><STRONG><a name="[13a]"></a>scale_rational</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = scale_rational &rArr; reduce_rational &rArr; gcd
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reduce_rational
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_timer_string
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_timer_fraction
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_timer_count
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_timer_set
</UL>

<P><STRONG><a name="[13b]"></a>reduce_timer</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = reduce_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_timer_add
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mad_timer_set
</UL>

<P><STRONG><a name="[13c]"></a>reduce_rational</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = reduce_rational &rArr; gcd
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scale_rational
</UL>

<P><STRONG><a name="[140]"></a>gcd</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = gcd
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reduce_rational
</UL>

<P><STRONG><a name="[152]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[150]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[155]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[154]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[59]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
