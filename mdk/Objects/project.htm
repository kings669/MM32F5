<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6180002: Last Updated: Fri Aug  5 15:15:42 2022
<BR><P>
<H3>Maximum Stack Usage =        552 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; app_fatfs_listfiles &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; SDSPI_ReadBlocks &rArr; SDSPI_StopTrans &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[0]">Reset_Handler</a>
 <LI><a href="#[2]">HardFault_Handler</a>
 <LI><a href="#[1d]">ADC1_2_IRQHandler</a>
 <LI><a href="#[d]">BKP_TAMPER_IRQHandler</a>
 <LI><a href="#[4]">BusFault_Handler</a>
 <LI><a href="#[43]">COMP_IRQHandler</a>
 <LI><a href="#[16]">DMA1_CH1_IRQHandler</a>
 <LI><a href="#[17]">DMA1_CH2_IRQHandler</a>
 <LI><a href="#[18]">DMA1_CH3_IRQHandler</a>
 <LI><a href="#[19]">DMA1_CH4_IRQHandler</a>
 <LI><a href="#[1a]">DMA1_CH5_IRQHandler</a>
 <LI><a href="#[1b]">DMA1_CH6_IRQHandler</a>
 <LI><a href="#[1c]">DMA1_CH7_IRQHandler</a>
 <LI><a href="#[1e]">DMA1_CH8_IRQHandler</a>
 <LI><a href="#[3c]">DMA2_CH1_IRQHandler</a>
 <LI><a href="#[3d]">DMA2_CH2_IRQHandler</a>
 <LI><a href="#[3e]">DMA2_CH3_IRQHandler</a>
 <LI><a href="#[3f]">DMA2_CH4_IRQHandler</a>
 <LI><a href="#[40]">DMA2_CH5_IRQHandler</a>
 <LI><a href="#[46]">DMA2_CH6_IRQHandler</a>
 <LI><a href="#[47]">DMA2_CH7_IRQHandler</a>
 <LI><a href="#[48]">DMA2_CH8_IRQHandler</a>
 <LI><a href="#[8]">DebugMon_Handler</a>
 <LI><a href="#[114]">Default_Handler</a>
 <LI><a href="#[41]">ENET_IRQHandler</a>
 <LI><a href="#[42]">ENET_WKUP_IRQHandler</a>
 <LI><a href="#[11]">EXTI0_IRQHandler</a>
 <LI><a href="#[2f]">EXTI15_10_IRQHandler</a>
 <LI><a href="#[12]">EXTI1_IRQHandler</a>
 <LI><a href="#[13]">EXTI2_IRQHandler</a>
 <LI><a href="#[14]">EXTI3_IRQHandler</a>
 <LI><a href="#[15]">EXTI4_IRQHandler</a>
 <LI><a href="#[20]">EXTI9_5_IRQHandler</a>
 <LI><a href="#[f]">FLASH_IRQHandler</a>
 <LI><a href="#[1f]">FlexCAN1_IRQHandler</a>
 <LI><a href="#[44]">FlexCAN2_IRQHandler</a>
 <LI><a href="#[28]">I2C1_IRQHandler</a>
 <LI><a href="#[29]">I2C2_IRQHandler</a>
 <LI><a href="#[4c]">LPTIM_IRQHandler</a>
 <LI><a href="#[4d]">LPUART_IRQHandler</a>
 <LI><a href="#[3]">MemManage_Handler</a>
 <LI><a href="#[1]">NMI_Handler</a>
 <LI><a href="#[c]">PVD_IRQHandler</a>
 <LI><a href="#[9]">PendSV_Handler</a>
 <LI><a href="#[4b]">QSPI_IRQHandler</a>
 <LI><a href="#[10]">RCC_CRS_IRQHandler</a>
 <LI><a href="#[30]">RTC_ALR_IRQHandler</a>
 <LI><a href="#[e]">RTC_IRQHandler</a>
 <LI><a href="#[2a]">SPI1_IRQHandler</a>
 <LI><a href="#[2b]">SPI2_IRQHandler</a>
 <LI><a href="#[37]">SPI3_IRQHandler</a>
 <LI><a href="#[7]">SVC_Handler</a>
 <LI><a href="#[6]">SecureFault_Handler</a>
 <LI><a href="#[a]">SysTick_Handler</a>
 <LI><a href="#[21]">TIM1_BRK_IRQHandler</a>
 <LI><a href="#[24]">TIM1_CC_IRQHandler</a>
 <LI><a href="#[23]">TIM1_TRG_COM_IRQHandler</a>
 <LI><a href="#[22]">TIM1_UP_IRQHandler</a>
 <LI><a href="#[25]">TIM2_IRQHandler</a>
 <LI><a href="#[26]">TIM3_IRQHandler</a>
 <LI><a href="#[27]">TIM4_IRQHandler</a>
 <LI><a href="#[36]">TIM5_IRQHandler</a>
 <LI><a href="#[3a]">TIM6_IRQHandler</a>
 <LI><a href="#[3b]">TIM7_IRQHandler</a>
 <LI><a href="#[32]">TIM8_BRK_IRQHandler</a>
 <LI><a href="#[35]">TIM8_CC_IRQHandler</a>
 <LI><a href="#[34]">TIM8_TRG_COM_IRQHandler</a>
 <LI><a href="#[33]">TIM8_UP_IRQHandler</a>
 <LI><a href="#[2c]">UART1_IRQHandler</a>
 <LI><a href="#[2d]">UART2_IRQHandler</a>
 <LI><a href="#[2e]">UART3_IRQHandler</a>
 <LI><a href="#[38]">UART4_IRQHandler</a>
 <LI><a href="#[39]">UART5_IRQHandler</a>
 <LI><a href="#[49]">UART6_IRQHandler</a>
 <LI><a href="#[4a]">UART7_IRQHandler</a>
 <LI><a href="#[45]">USB_FS_IRQHandler</a>
 <LI><a href="#[31]">USB_WKUP_IRQHandler</a>
 <LI><a href="#[5]">UsageFault_Handler</a>
 <LI><a href="#[b]">WWDG_IWDG_IRQHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[1d]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1d]">ADC1_2_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[d]">BKP_TAMPER_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[43]">COMP_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[16]">DMA1_CH1_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[17]">DMA1_CH2_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[18]">DMA1_CH3_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[19]">DMA1_CH4_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[1a]">DMA1_CH5_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[1b]">DMA1_CH6_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[1c]">DMA1_CH7_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[1e]">DMA1_CH8_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[3c]">DMA2_CH1_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[3d]">DMA2_CH2_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[3e]">DMA2_CH3_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[3f]">DMA2_CH4_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[40]">DMA2_CH5_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[46]">DMA2_CH6_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[47]">DMA2_CH7_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[48]">DMA2_CH8_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[41]">ENET_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[42]">ENET_WKUP_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[11]">EXTI0_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[2f]">EXTI15_10_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[12]">EXTI1_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[13]">EXTI2_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[14]">EXTI3_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[15]">EXTI4_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[20]">EXTI9_5_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[f]">FLASH_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[1f]">FlexCAN1_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[44]">FlexCAN2_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[28]">I2C1_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[29]">I2C2_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[4c]">LPTIM_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[4d]">LPUART_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[c]">PVD_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[4b]">QSPI_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[10]">RCC_CRS_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[30]">RTC_ALR_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[e]">RTC_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[2a]">SPI1_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[2b]">SPI2_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[37]">SPI3_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[6]">SecureFault_Handler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[21]">TIM1_BRK_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[24]">TIM1_CC_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[23]">TIM1_TRG_COM_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[22]">TIM1_UP_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[25]">TIM2_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[26]">TIM3_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[27]">TIM4_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[36]">TIM5_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[3a]">TIM6_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[3b]">TIM7_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[32]">TIM8_BRK_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[35]">TIM8_CC_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[34]">TIM8_TRG_COM_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[33]">TIM8_UP_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[2c]">UART1_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[2d]">UART2_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[2e]">UART3_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[38]">UART4_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[39]">UART5_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[49]">UART6_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[4a]">UART7_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[45]">USB_FS_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[31]">USB_WKUP_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[b]">WWDG_IWDG_IRQHandler</a> from startup_mm32f5277e.o(.text) referenced from startup_mm32f5277e.o(RESET)
 <LI><a href="#[4f]">fputc</a> from board_init.o(.text) referenced from printfa.o(i.__0printf)
 <LI><a href="#[4e]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[51]">sdspi_spi_freq</a> from sdspi_port.o(.text) referenced from sdspi_port.o(.rodata.board_sdspi_if)
 <LI><a href="#[50]">sdspi_spi_init</a> from sdspi_port.o(.text) referenced from sdspi_port.o(.rodata.board_sdspi_if)
 <LI><a href="#[52]">sdspi_spi_xfer</a> from sdspi_port.o(.text) referenced from sdspi_port.o(.rodata.board_sdspi_if)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[53]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[e8]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry4.o(.ARM.Collect$$$$00000003))

<P><STRONG><a name="[54]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[e0]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[e9]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[ea]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[eb]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[ec]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[ed]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[4e]"></a>main</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = main &rArr; app_fatfs_listfiles &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; SDSPI_ReadBlocks &rArr; SDSPI_StopTrans &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fatfs_listfiles
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[59]"></a>app_fatfs_listfiles</STRONG> (Thumb, 176 bytes, Stack size 96 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = app_fatfs_listfiles &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; SDSPI_ReadBlocks &rArr; SDSPI_StopTrans &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[56]"></a>BOARD_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, board_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BOARD_Init &rArr; BOARD_InitPins &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitBootClocks
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[62]"></a>BOARD_InitDebugConsole</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, board_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BOARD_InitDebugConsole &rArr; UART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Enable
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_Init
</UL>

<P><STRONG><a name="[4f]"></a>fputc</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, board_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fputc &rArr; UART_PutData
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PutData
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[67]"></a>fgetc</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, board_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fgetc &rArr; UART_GetData
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetData
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>

<P><STRONG><a name="[60]"></a>BOARD_InitBootClocks</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, clock_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BOARD_InitBootClocks &rArr; RCC_EnableAHB1Periphs
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ResetAHB1Periphs
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAHB1Periphs
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ResetAPB2Periphs
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_EnableAPB2Periphs
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_BootToHSE120MHz
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_ResetToDefault
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_Init
</UL>

<P><STRONG><a name="[69]"></a>CLOCK_ResetToDefault</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, clock_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitBootClocks
</UL>

<P><STRONG><a name="[6a]"></a>CLOCK_BootToHSE120MHz</STRONG> (Thumb, 212 bytes, Stack size 0 bytes, clock_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitBootClocks
</UL>

<P><STRONG><a name="[61]"></a>BOARD_InitPins</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, pin_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BOARD_InitPins &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConf
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_Init
</UL>

<P><STRONG><a name="[50]"></a>sdspi_spi_init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, sdspi_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sdspi_spi_init &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdspi_port.o(.rodata.board_sdspi_if)
</UL>
<P><STRONG><a name="[51]"></a>sdspi_spi_freq</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, sdspi_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = sdspi_spi_freq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdspi_port.o(.rodata.board_sdspi_if)
</UL>
<P><STRONG><a name="[52]"></a>sdspi_spi_xfer</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, sdspi_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sdspi_spi_xfer &rArr; spi_xfer &rArr; GPIO_ReadInDataBit
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_xfer
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_assert_cs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdspi_port.o(.rodata.board_sdspi_if)
</UL>
<P><STRONG><a name="[73]"></a>spi_xfer</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, sdspi_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = spi_xfer &rArr; GPIO_ReadInDataBit
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInDataBit
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_sdspi_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdspi_spi_xfer
</UL>

<P><STRONG><a name="[72]"></a>spi_assert_cs</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, sdspi_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = spi_assert_cs &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdspi_spi_xfer
</UL>

<P><STRONG><a name="[6f]"></a>GPIO_Init</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, hal_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>

<P><STRONG><a name="[75]"></a>GPIO_ReadInDataBit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hal_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_ReadInDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_xfer
</UL>

<P><STRONG><a name="[ee]"></a>GPIO_ReadInData</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[ef]"></a>GPIO_ReadOutDataBit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>GPIO_ReadOutData</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>GPIO_SetBits</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>GPIO_ClearBits</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>GPIO_WriteBit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hal_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_xfer
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_assert_cs
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdspi_spi_init
</UL>

<P><STRONG><a name="[f3]"></a>GPIO_WriteBits</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[f4]"></a>GPIO_PinLock</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>GPIO_PinLockConf</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>GPIO_PinAFConf</STRONG> (Thumb, 192 bytes, Stack size 20 bytes, hal_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConf
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>

<P><STRONG><a name="[f6]"></a>GPIO_PortAFConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, hal_gpio.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>RCC_EnableAHB1Periphs</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, hal_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_EnableAHB1Periphs
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitBootClocks
</UL>

<P><STRONG><a name="[f7]"></a>RCC_EnableAPB1Periphs</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>RCC_EnableAPB2Periphs</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, hal_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_EnableAPB2Periphs
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitBootClocks
</UL>

<P><STRONG><a name="[6e]"></a>RCC_ResetAHB1Periphs</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, hal_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RCC_ResetAHB1Periphs
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitBootClocks
</UL>

<P><STRONG><a name="[f8]"></a>RCC_ResetAPB1Periphs</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>RCC_ResetAPB2Periphs</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, hal_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RCC_ResetAPB2Periphs
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitBootClocks
</UL>

<P><STRONG><a name="[f9]"></a>RCC_SetMCOConf</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[fa]"></a>RCC_SetADCClockDiv</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[fb]"></a>RCC_SetADCCalibClockDiv</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[fc]"></a>RCC_SetDACClockDiv</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[fd]"></a>RCC_EnableFSMCSyncMode</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>RCC_SetFSMCClockDiv</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[ff]"></a>RCC_SetTPIUClockDiv</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>RCC_EanbleBKPWriteProtect</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[101]"></a>RCC_EanbleBKPReset</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[102]"></a>RCC_EanbleRTCClock</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[103]"></a>RCC_SetRTCClockSource</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>RCC_EanbleLSEBypassMode</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[105]"></a>GetLSEReadyStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[106]"></a>RCC_EanbleLSEClock</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[107]"></a>GetResetStatus</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[108]"></a>ClearResetStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>RCC_EanbleCPULock</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[10a]"></a>RCC_EanblePVDReset</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[10b]"></a>RCC_EanbleLSIClockOutput</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>RCC_EanbleLSIClock</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, hal_rcc.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>UART_Init</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
</UL>

<P><STRONG><a name="[64]"></a>UART_Enable</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitDebugConsole
</UL>

<P><STRONG><a name="[10d]"></a>UART_EnableInterrupts</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[10e]"></a>UART_GetEnabledInterrupts</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[10f]"></a>UART_EnableDMA</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>UART_PutData</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_PutData
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[68]"></a>UART_GetData</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UART_GetData
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[65]"></a>UART_GetStatus</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, hal_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UART_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[110]"></a>UART_GetInterruptStatus</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[111]"></a>UART_ClearInterruptStatus</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[112]"></a>UART_GetRxDataRegAddr</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[113]"></a>UART_GetTxDataRegAddr</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, hal_uart.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>SystemInit</STRONG> (Thumb, 260 bytes, Stack size 12 bytes, system_mm32f5277e.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SystemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = Reset_Handler &rArr; SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>BKP_TAMPER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>COMP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_CH1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_CH2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_CH3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_CH4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_CH5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_CH6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_CH7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_CH8_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA2_CH1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DMA2_CH2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA2_CH3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA2_CH4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA2_CH5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_CH6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_CH7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_CH8_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[114]"></a>Default_Handler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>ENET_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>ENET_WKUP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>FlexCAN1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>FlexCAN2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>I2C1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>LPTIM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>LPUART_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PVD_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>QSPI_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RCC_CRS_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>RTC_ALR_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RTC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>SPI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>SPI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SPI3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SecureFault_Handler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>UART1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>UART2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>UART3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>UART4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>UART5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>UART6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>UART7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>USB_FS_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USB_WKUP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WWDG_IWDG_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, startup_mm32f5277e.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f5277e.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>SDSPI_SendCid</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, sdspi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_DecodeCid
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_Read
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendCmd
</UL>

<P><STRONG><a name="[7d]"></a>SDSPI_Init</STRONG> (Thumb, 338 bytes, Stack size 40 bytes, sdspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SDSPI_Init &rArr; SDSPI_AppSendOpCond &rArr; SDSPI_SendAppCmd &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendScr
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendCsd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SetBlockSize
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_ReadOcr
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_AppSendOpCond
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendIfCond
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_GoIdle
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[88]"></a>SDSPI_Deinit</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sdspi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[8d]"></a>SDSPI_CheckReadOnly</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, sdspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDSPI_CheckReadOnly
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_WriteBlocks
</UL>

<P><STRONG><a name="[8a]"></a>SDSPI_ReadBlocks</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, sdspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SDSPI_ReadBlocks &rArr; SDSPI_StopTrans &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_StopTrans
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_Read
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[8c]"></a>SDSPI_WriteBlocks</STRONG> (Thumb, 274 bytes, Stack size 48 bytes, sdspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SDSPI_WriteBlocks &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_CheckReadOnly
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_Write
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_WaitReady
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[8f]"></a>SDSPI_EraseBlocksPre</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, sdspi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendAppCmd
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendCmd
</UL>

<P><STRONG><a name="[90]"></a>SDSPI_EraseBlocks</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, sdspi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_Erase
</UL>

<P><STRONG><a name="[92]"></a>SDSPI_SwitchToHighSpeed</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, sdspi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SelectFunction
</UL>

<P><STRONG><a name="[9a]"></a>disk_status</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[95]"></a>disk_initialize</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = disk_initialize &rArr; SDSPI_Init &rArr; SDSPI_AppSendOpCond &rArr; SDSPI_SendAppCmd &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[96]"></a>disk_read</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = disk_read &rArr; SDSPI_ReadBlocks &rArr; SDSPI_StopTrans &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_ReadBlocks
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[97]"></a>disk_write</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = disk_write &rArr; SDSPI_WriteBlocks &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_WriteBlocks
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
</UL>

<P><STRONG><a name="[b6]"></a>disk_ioctl</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, diskio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[58]"></a>f_mount</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = f_mount &rArr; mount_volume &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; disk_read &rArr; SDSPI_ReadBlocks &rArr; SDSPI_StopTrans &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9f]"></a>f_open</STRONG> (Thumb, 840 bytes, Stack size 104 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[af]"></a>f_read</STRONG> (Thumb, 620 bytes, Stack size 64 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_gets
</UL>

<P><STRONG><a name="[b2]"></a>f_write</STRONG> (Thumb, 726 bytes, Stack size 64 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_flush
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
</UL>

<P><STRONG><a name="[b4]"></a>f_sync</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[b7]"></a>f_close</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>

<P><STRONG><a name="[b8]"></a>f_lseek</STRONG> (Thumb, 638 bytes, Stack size 48 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[5d]"></a>f_opendir</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; SDSPI_ReadBlocks &rArr; SDSPI_StopTrans &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fatfs_listfiles
</UL>

<P><STRONG><a name="[5f]"></a>f_closedir</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = f_closedir &rArr; validate &rArr; disk_status
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fatfs_listfiles
</UL>

<P><STRONG><a name="[5e]"></a>f_readdir</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = f_readdir &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; SDSPI_ReadBlocks &rArr; SDSPI_StopTrans &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fatfs_listfiles
</UL>

<P><STRONG><a name="[bd]"></a>f_stat</STRONG> (Thumb, 100 bytes, Stack size 64 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[be]"></a>f_getfree</STRONG> (Thumb, 362 bytes, Stack size 64 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[bf]"></a>f_truncate</STRONG> (Thumb, 326 bytes, Stack size 32 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[c0]"></a>f_unlink</STRONG> (Thumb, 292 bytes, Stack size 112 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[c2]"></a>f_mkdir</STRONG> (Thumb, 382 bytes, Stack size 104 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[c3]"></a>f_rename</STRONG> (Thumb, 486 bytes, Stack size 160 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
</UL>

<P><STRONG><a name="[c4]"></a>f_mkfs</STRONG> (Thumb, 2398 bytes, Stack size 184 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[c7]"></a>f_gets</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[c8]"></a>f_putc</STRONG> (Thumb, 40 bytes, Stack size 96 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_flush
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_init
</UL>

<P><STRONG><a name="[cc]"></a>f_puts</STRONG> (Thumb, 52 bytes, Stack size 96 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_flush
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_init
</UL>

<P><STRONG><a name="[cd]"></a>f_printf</STRONG> (Thumb, 1168 bytes, Stack size 208 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_flush
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_init
</UL>

<P><STRONG><a name="[b1]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[115]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[116]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_Read
</UL>

<P><STRONG><a name="[117]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[118]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[c5]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
</UL>

<P><STRONG><a name="[89]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_Deinit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SelectFunction
</UL>

<P><STRONG><a name="[119]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[5a]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d2]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[cf]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[d4]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[d9]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[da]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[db]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[11a]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[e7]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[dc]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d5]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[11b]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[11c]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[11d]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[11e]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[d8]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>

<P><STRONG><a name="[d7]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[de]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[df]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[e4]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[55]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[11f]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[120]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[121]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[122]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[57]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = printf
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fatfs_listfiles
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[123]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[124]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[125]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[5b]"></a>getc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, getc.o(i.getc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = getc &rArr; fgetc &rArr; UART_GetData
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5c]"></a>putc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, putc.o(i.putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = putc &rArr; fputc &rArr; UART_PutData
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[74]"></a>board_sdspi_delay</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sdspi_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = board_sdspi_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_xfer
</UL>

<P><STRONG><a name="[78]"></a>SDSPI_SendCmd</STRONG> (Thumb, 392 bytes, Stack size 48 bytes, sdspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_WaitReady
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_EraseBlocksPre
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_WriteBlocks
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_ReadBlocks
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendCid
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SwitchFunction
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_Erase
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_StopTrans
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendAppCmd
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendScr
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendCsd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SetBlockSize
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_ReadOcr
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_AppSendOpCond
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendIfCond
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_GoIdle
</UL>

<P><STRONG><a name="[79]"></a>SDSPI_Read</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, sdspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SDSPI_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_ReadBlocks
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendCid
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SwitchFunction
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendScr
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendCsd
</UL>

<P><STRONG><a name="[7a]"></a>SDSPI_DecodeCid</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, sdspi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendCid
</UL>

<P><STRONG><a name="[7b]"></a>SDSPI_WaitReady</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, sdspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDSPI_WaitReady
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_WriteBlocks
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_Erase
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_Write
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendCmd
</UL>

<P><STRONG><a name="[7e]"></a>SDSPI_GoIdle</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, sdspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SDSPI_GoIdle &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_Init
</UL>

<P><STRONG><a name="[7f]"></a>SDSPI_SendIfCond</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, sdspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SDSPI_SendIfCond &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_Init
</UL>

<P><STRONG><a name="[80]"></a>SDSPI_AppSendOpCond</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, sdspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SDSPI_AppSendOpCond &rArr; SDSPI_SendAppCmd &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendAppCmd
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_Init
</UL>

<P><STRONG><a name="[81]"></a>SDSPI_ReadOcr</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, sdspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SDSPI_ReadOcr &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_Init
</UL>

<P><STRONG><a name="[82]"></a>SDSPI_SetBlockSize</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, sdspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SDSPI_SetBlockSize &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_Init
</UL>

<P><STRONG><a name="[83]"></a>SDSPI_SendCsd</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, sdspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SDSPI_SendCsd &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_DecodeCsd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_Read
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_Init
</UL>

<P><STRONG><a name="[84]"></a>SDSPI_SendScr</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, sdspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SDSPI_SendScr &rArr; SDSPI_SendAppCmd &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_DecodeScr
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendAppCmd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_Read
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_Init
</UL>

<P><STRONG><a name="[85]"></a>SDSPI_SendAppCmd</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, sdspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SDSPI_SendAppCmd &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_EraseBlocksPre
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendScr
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_AppSendOpCond
</UL>

<P><STRONG><a name="[86]"></a>SDSPI_DecodeCsd</STRONG> (Thumb, 708 bytes, Stack size 12 bytes, sdspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SDSPI_DecodeCsd
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendCsd
</UL>

<P><STRONG><a name="[87]"></a>SDSPI_DecodeScr</STRONG> (Thumb, 122 bytes, Stack size 12 bytes, sdspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SDSPI_DecodeScr
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendScr
</UL>

<P><STRONG><a name="[8b]"></a>SDSPI_StopTrans</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, sdspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SDSPI_StopTrans &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_ReadBlocks
</UL>

<P><STRONG><a name="[8e]"></a>SDSPI_Write</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, sdspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SDSPI_Write &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_WaitReady
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_WriteBlocks
</UL>

<P><STRONG><a name="[91]"></a>SDSPI_Erase</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, sdspi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_WaitReady
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_EraseBlocks
</UL>

<P><STRONG><a name="[93]"></a>SDSPI_SelectFunction</STRONG> (Thumb, 450 bytes, Stack size 112 bytes, sdspi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SwitchFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SwitchToHighSpeed
</UL>

<P><STRONG><a name="[94]"></a>SDSPI_SwitchFunction</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, sdspi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_Read
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDSPI_SelectFunction
</UL>

<P><STRONG><a name="[98]"></a>get_ldnumber</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[99]"></a>mount_volume</STRONG> (Thumb, 1044 bytes, Stack size 72 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = mount_volume &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; disk_read &rArr; SDSPI_ReadBlocks &rArr; SDSPI_StopTrans &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[9b]"></a>find_volume</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; disk_read &rArr; SDSPI_ReadBlocks &rArr; SDSPI_StopTrans &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[9c]"></a>ld_word</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[9d]"></a>ld_dword</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[9e]"></a>move_window</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = move_window &rArr; disk_read &rArr; SDSPI_ReadBlocks &rArr; SDSPI_StopTrans &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[a0]"></a>follow_path</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; SDSPI_ReadBlocks &rArr; SDSPI_StopTrans &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>

<P><STRONG><a name="[a1]"></a>dir_register</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[a2]"></a>st_dword</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = st_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
</UL>

<P><STRONG><a name="[a3]"></a>ld_clust</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ld_clust &rArr; ld_word
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>

<P><STRONG><a name="[a4]"></a>st_clust</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[a5]"></a>remove_chain</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[a6]"></a>get_fat</STRONG> (Thumb, 306 bytes, Stack size 40 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = get_fat &rArr; move_window &rArr; disk_read &rArr; SDSPI_ReadBlocks &rArr; SDSPI_StopTrans &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
</UL>

<P><STRONG><a name="[a7]"></a>clst2sect</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>

<P><STRONG><a name="[a8]"></a>dir_sdi</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; disk_read &rArr; SDSPI_ReadBlocks &rArr; SDSPI_StopTrans &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>

<P><STRONG><a name="[a9]"></a>create_name</STRONG> (Thumb, 474 bytes, Stack size 56 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = create_name &rArr; dbc_2nd
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbc_2nd
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbc_1st
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[aa]"></a>dir_find</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; SDSPI_ReadBlocks &rArr; SDSPI_StopTrans &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[ab]"></a>dir_alloc</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[ac]"></a>st_word</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_partition
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
</UL>

<P><STRONG><a name="[ad]"></a>put_fat</STRONG> (Thumb, 434 bytes, Stack size 48 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = put_fat &rArr; move_window &rArr; disk_read &rArr; SDSPI_ReadBlocks &rArr; SDSPI_StopTrans &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
</UL>

<P><STRONG><a name="[ae]"></a>sync_window</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = sync_window &rArr; disk_write &rArr; SDSPI_WriteBlocks &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[b0]"></a>validate</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = validate &rArr; disk_status
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[b3]"></a>create_chain</STRONG> (Thumb, 482 bytes, Stack size 40 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; SDSPI_ReadBlocks &rArr; SDSPI_StopTrans &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[b5]"></a>sync_fs</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[b9]"></a>dir_read</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; SDSPI_ReadBlocks &rArr; SDSPI_StopTrans &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[ba]"></a>get_fileinfo</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_fileinfo &rArr; ld_dword
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[bb]"></a>dir_next</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; SDSPI_ReadBlocks &rArr; SDSPI_StopTrans &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[bc]"></a>dir_clear</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = dir_clear &rArr; sync_window &rArr; disk_write &rArr; SDSPI_WriteBlocks &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[c1]"></a>dir_remove</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[c6]"></a>create_partition</STRONG> (Thumb, 648 bytes, Stack size 72 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[c9]"></a>putc_init</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_printf
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_puts
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_putc
</UL>

<P><STRONG><a name="[ca]"></a>putc_bfd</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_printf
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_puts
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_putc
</UL>

<P><STRONG><a name="[cb]"></a>putc_flush</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_printf
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_puts
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_putc
</UL>

<P><STRONG><a name="[ce]"></a>check_fs</STRONG> (Thumb, 328 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = check_fs &rArr; move_window &rArr; disk_read &rArr; SDSPI_ReadBlocks &rArr; SDSPI_StopTrans &rArr; SDSPI_SendCmd &rArr; SDSPI_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[d0]"></a>dbc_1st</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dbc_1st
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[d1]"></a>dbc_2nd</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dbc_2nd
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[e3]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[e2]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[e6]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[e5]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
